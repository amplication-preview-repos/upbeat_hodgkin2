/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProcessedPhotoService } from "../processedPhoto.service";
import { ProcessedPhotoCreateInput } from "./ProcessedPhotoCreateInput";
import { ProcessedPhoto } from "./ProcessedPhoto";
import { ProcessedPhotoFindManyArgs } from "./ProcessedPhotoFindManyArgs";
import { ProcessedPhotoWhereUniqueInput } from "./ProcessedPhotoWhereUniqueInput";
import { ProcessedPhotoUpdateInput } from "./ProcessedPhotoUpdateInput";
import { ProcessedPhotoDto } from "../ProcessedPhotoDto";

export class ProcessedPhotoControllerBase {
  constructor(protected readonly service: ProcessedPhotoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProcessedPhoto })
  async createProcessedPhoto(
    @common.Body() data: ProcessedPhotoCreateInput
  ): Promise<ProcessedPhoto> {
    return await this.service.createProcessedPhoto({
      data: {
        ...data,

        uploadedPhoto: data.uploadedPhoto
          ? {
              connect: data.uploadedPhoto,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        processedPhotoUrl: true,
        updatedAt: true,

        uploadedPhoto: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProcessedPhoto] })
  @ApiNestedQuery(ProcessedPhotoFindManyArgs)
  async processedPhotos(
    @common.Req() request: Request
  ): Promise<ProcessedPhoto[]> {
    const args = plainToClass(ProcessedPhotoFindManyArgs, request.query);
    return this.service.processedPhotos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        processedPhotoUrl: true,
        updatedAt: true,

        uploadedPhoto: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProcessedPhoto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async processedPhoto(
    @common.Param() params: ProcessedPhotoWhereUniqueInput
  ): Promise<ProcessedPhoto | null> {
    const result = await this.service.processedPhoto({
      where: params,
      select: {
        createdAt: true,
        id: true,
        processedPhotoUrl: true,
        updatedAt: true,

        uploadedPhoto: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProcessedPhoto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProcessedPhoto(
    @common.Param() params: ProcessedPhotoWhereUniqueInput,
    @common.Body() data: ProcessedPhotoUpdateInput
  ): Promise<ProcessedPhoto | null> {
    try {
      return await this.service.updateProcessedPhoto({
        where: params,
        data: {
          ...data,

          uploadedPhoto: data.uploadedPhoto
            ? {
                connect: data.uploadedPhoto,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          processedPhotoUrl: true,
          updatedAt: true,

          uploadedPhoto: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProcessedPhoto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProcessedPhoto(
    @common.Param() params: ProcessedPhotoWhereUniqueInput
  ): Promise<ProcessedPhoto | null> {
    try {
      return await this.service.deleteProcessedPhoto({
        where: params,
        select: {
          createdAt: true,
          id: true,
          processedPhotoUrl: true,
          updatedAt: true,

          uploadedPhoto: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/processedPhotos/:id")
  @swagger.ApiOkResponse({
    type: ProcessedPhotoDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DownloadProcessedPhoto(
    @common.Body()
    body: string
  ): Promise<ProcessedPhotoDto> {
    return this.service.DownloadProcessedPhoto(body);
  }
}
