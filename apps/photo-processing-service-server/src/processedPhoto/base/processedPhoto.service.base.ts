/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProcessedPhoto as PrismaProcessedPhoto,
  UploadedPhoto as PrismaUploadedPhoto,
} from "@prisma/client";

import { ProcessedPhotoDto } from "../ProcessedPhotoDto";

export class ProcessedPhotoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcessedPhotoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.processedPhoto.count(args);
  }

  async processedPhotos(
    args: Prisma.ProcessedPhotoFindManyArgs
  ): Promise<PrismaProcessedPhoto[]> {
    return this.prisma.processedPhoto.findMany(args);
  }
  async processedPhoto(
    args: Prisma.ProcessedPhotoFindUniqueArgs
  ): Promise<PrismaProcessedPhoto | null> {
    return this.prisma.processedPhoto.findUnique(args);
  }
  async createProcessedPhoto(
    args: Prisma.ProcessedPhotoCreateArgs
  ): Promise<PrismaProcessedPhoto> {
    return this.prisma.processedPhoto.create(args);
  }
  async updateProcessedPhoto(
    args: Prisma.ProcessedPhotoUpdateArgs
  ): Promise<PrismaProcessedPhoto> {
    return this.prisma.processedPhoto.update(args);
  }
  async deleteProcessedPhoto(
    args: Prisma.ProcessedPhotoDeleteArgs
  ): Promise<PrismaProcessedPhoto> {
    return this.prisma.processedPhoto.delete(args);
  }

  async getUploadedPhoto(
    parentId: string
  ): Promise<PrismaUploadedPhoto | null> {
    return this.prisma.processedPhoto
      .findUnique({
        where: { id: parentId },
      })
      .uploadedPhoto();
  }
  async DownloadProcessedPhoto(args: string): Promise<ProcessedPhotoDto> {
    throw new Error("Not implemented");
  }
}
