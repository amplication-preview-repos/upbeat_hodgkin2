/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UploadedPhotoService } from "../uploadedPhoto.service";
import { UploadedPhotoCreateInput } from "./UploadedPhotoCreateInput";
import { UploadedPhoto } from "./UploadedPhoto";
import { UploadedPhotoFindManyArgs } from "./UploadedPhotoFindManyArgs";
import { UploadedPhotoWhereUniqueInput } from "./UploadedPhotoWhereUniqueInput";
import { UploadedPhotoUpdateInput } from "./UploadedPhotoUpdateInput";
import { ProcessedPhotoFindManyArgs } from "../../processedPhoto/base/ProcessedPhotoFindManyArgs";
import { ProcessedPhoto } from "../../processedPhoto/base/ProcessedPhoto";
import { ProcessedPhotoWhereUniqueInput } from "../../processedPhoto/base/ProcessedPhotoWhereUniqueInput";
import { UploadPhotoDto } from "../UploadPhotoDto";

export class UploadedPhotoControllerBase {
  constructor(protected readonly service: UploadedPhotoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UploadedPhoto })
  async createUploadedPhoto(
    @common.Body() data: UploadedPhotoCreateInput
  ): Promise<UploadedPhoto> {
    return await this.service.createUploadedPhoto({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        photoUrl: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UploadedPhoto] })
  @ApiNestedQuery(UploadedPhotoFindManyArgs)
  async uploadedPhotos(
    @common.Req() request: Request
  ): Promise<UploadedPhoto[]> {
    const args = plainToClass(UploadedPhotoFindManyArgs, request.query);
    return this.service.uploadedPhotos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        photoUrl: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UploadedPhoto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async uploadedPhoto(
    @common.Param() params: UploadedPhotoWhereUniqueInput
  ): Promise<UploadedPhoto | null> {
    const result = await this.service.uploadedPhoto({
      where: params,
      select: {
        createdAt: true,
        id: true,
        photoUrl: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UploadedPhoto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUploadedPhoto(
    @common.Param() params: UploadedPhotoWhereUniqueInput,
    @common.Body() data: UploadedPhotoUpdateInput
  ): Promise<UploadedPhoto | null> {
    try {
      return await this.service.updateUploadedPhoto({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          photoUrl: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UploadedPhoto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUploadedPhoto(
    @common.Param() params: UploadedPhotoWhereUniqueInput
  ): Promise<UploadedPhoto | null> {
    try {
      return await this.service.deleteUploadedPhoto({
        where: params,
        select: {
          createdAt: true,
          id: true,
          photoUrl: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/processedPhotos")
  @ApiNestedQuery(ProcessedPhotoFindManyArgs)
  async findProcessedPhotos(
    @common.Req() request: Request,
    @common.Param() params: UploadedPhotoWhereUniqueInput
  ): Promise<ProcessedPhoto[]> {
    const query = plainToClass(ProcessedPhotoFindManyArgs, request.query);
    const results = await this.service.findProcessedPhotos(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        processedPhotoUrl: true,
        updatedAt: true,

        uploadedPhoto: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/processedPhotos")
  async connectProcessedPhotos(
    @common.Param() params: UploadedPhotoWhereUniqueInput,
    @common.Body() body: ProcessedPhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      processedPhotos: {
        connect: body,
      },
    };
    await this.service.updateUploadedPhoto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/processedPhotos")
  async updateProcessedPhotos(
    @common.Param() params: UploadedPhotoWhereUniqueInput,
    @common.Body() body: ProcessedPhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      processedPhotos: {
        set: body,
      },
    };
    await this.service.updateUploadedPhoto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/processedPhotos")
  async disconnectProcessedPhotos(
    @common.Param() params: UploadedPhotoWhereUniqueInput,
    @common.Body() body: ProcessedPhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      processedPhotos: {
        disconnect: body,
      },
    };
    await this.service.updateUploadedPhoto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Post("/uploadPhoto")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UploadPhoto(
    @common.Body()
    body: UploadPhotoDto
  ): Promise<string> {
    return this.service.UploadPhoto(body);
  }
}
