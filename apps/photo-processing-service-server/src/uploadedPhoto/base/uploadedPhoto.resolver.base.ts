/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UploadedPhoto } from "./UploadedPhoto";
import { UploadedPhotoCountArgs } from "./UploadedPhotoCountArgs";
import { UploadedPhotoFindManyArgs } from "./UploadedPhotoFindManyArgs";
import { UploadedPhotoFindUniqueArgs } from "./UploadedPhotoFindUniqueArgs";
import { CreateUploadedPhotoArgs } from "./CreateUploadedPhotoArgs";
import { UpdateUploadedPhotoArgs } from "./UpdateUploadedPhotoArgs";
import { DeleteUploadedPhotoArgs } from "./DeleteUploadedPhotoArgs";
import { ProcessedPhotoFindManyArgs } from "../../processedPhoto/base/ProcessedPhotoFindManyArgs";
import { ProcessedPhoto } from "../../processedPhoto/base/ProcessedPhoto";
import { User } from "../../user/base/User";
import { UploadPhotoDto } from "../UploadPhotoDto";
import { UploadedPhotoService } from "../uploadedPhoto.service";
@graphql.Resolver(() => UploadedPhoto)
export class UploadedPhotoResolverBase {
  constructor(protected readonly service: UploadedPhotoService) {}

  async _uploadedPhotosMeta(
    @graphql.Args() args: UploadedPhotoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UploadedPhoto])
  async uploadedPhotos(
    @graphql.Args() args: UploadedPhotoFindManyArgs
  ): Promise<UploadedPhoto[]> {
    return this.service.uploadedPhotos(args);
  }

  @graphql.Query(() => UploadedPhoto, { nullable: true })
  async uploadedPhoto(
    @graphql.Args() args: UploadedPhotoFindUniqueArgs
  ): Promise<UploadedPhoto | null> {
    const result = await this.service.uploadedPhoto(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UploadedPhoto)
  async createUploadedPhoto(
    @graphql.Args() args: CreateUploadedPhotoArgs
  ): Promise<UploadedPhoto> {
    return await this.service.createUploadedPhoto({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UploadedPhoto)
  async updateUploadedPhoto(
    @graphql.Args() args: UpdateUploadedPhotoArgs
  ): Promise<UploadedPhoto | null> {
    try {
      return await this.service.updateUploadedPhoto({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UploadedPhoto)
  async deleteUploadedPhoto(
    @graphql.Args() args: DeleteUploadedPhotoArgs
  ): Promise<UploadedPhoto | null> {
    try {
      return await this.service.deleteUploadedPhoto(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ProcessedPhoto], { name: "processedPhotos" })
  async findProcessedPhotos(
    @graphql.Parent() parent: UploadedPhoto,
    @graphql.Args() args: ProcessedPhotoFindManyArgs
  ): Promise<ProcessedPhoto[]> {
    const results = await this.service.findProcessedPhotos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: UploadedPhoto): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => String)
  async UploadPhoto(
    @graphql.Args()
    args: UploadPhotoDto
  ): Promise<string> {
    return this.service.UploadPhoto(args);
  }
}
