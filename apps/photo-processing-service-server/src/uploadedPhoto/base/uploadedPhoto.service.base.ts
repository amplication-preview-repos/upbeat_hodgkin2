/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UploadedPhoto as PrismaUploadedPhoto,
  ProcessedPhoto as PrismaProcessedPhoto,
  User as PrismaUser,
} from "@prisma/client";

import { UploadPhotoDto } from "../UploadPhotoDto";

export class UploadedPhotoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UploadedPhotoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.uploadedPhoto.count(args);
  }

  async uploadedPhotos(
    args: Prisma.UploadedPhotoFindManyArgs
  ): Promise<PrismaUploadedPhoto[]> {
    return this.prisma.uploadedPhoto.findMany(args);
  }
  async uploadedPhoto(
    args: Prisma.UploadedPhotoFindUniqueArgs
  ): Promise<PrismaUploadedPhoto | null> {
    return this.prisma.uploadedPhoto.findUnique(args);
  }
  async createUploadedPhoto(
    args: Prisma.UploadedPhotoCreateArgs
  ): Promise<PrismaUploadedPhoto> {
    return this.prisma.uploadedPhoto.create(args);
  }
  async updateUploadedPhoto(
    args: Prisma.UploadedPhotoUpdateArgs
  ): Promise<PrismaUploadedPhoto> {
    return this.prisma.uploadedPhoto.update(args);
  }
  async deleteUploadedPhoto(
    args: Prisma.UploadedPhotoDeleteArgs
  ): Promise<PrismaUploadedPhoto> {
    return this.prisma.uploadedPhoto.delete(args);
  }

  async findProcessedPhotos(
    parentId: string,
    args: Prisma.ProcessedPhotoFindManyArgs
  ): Promise<PrismaProcessedPhoto[]> {
    return this.prisma.uploadedPhoto
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .processedPhotos(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.uploadedPhoto
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async UploadPhoto(args: UploadPhotoDto): Promise<string> {
    throw new Error("Not implemented");
  }
}
